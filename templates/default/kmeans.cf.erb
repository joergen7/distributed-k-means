



deftask gen_data( data( File ) : N k ) in python *{

import numpy as np
import random

N = int( N )
k = int( k )

n = float(N)/k
X = []
for i in range(k):
  c = (random.uniform(-1, 1), random.uniform(-1, 1))
  s = random.uniform(0.05,0.5)
  x = []
  while len(x) < n:
    a, b = np.array([np.random.normal(c[0], s), np.random.normal(c[1], s)])
    if abs(a) < 1 and abs(b) < 1:
      x.append([a,b])
  X.extend(x)
X = np.array(X)[:N]

data = "data.npy"
np.save( data, X )
}*

deftask init_state( state( File ) : data( File ) k ) in python *{

import numpy as np
import random

X = np.load( data )
k = int( k )

mu0 = random.sample( X, k )

state = "state.npy"
np.save( state, mu0 )
}*

deftask cluster( cls( File ) : data( File ) state( File ) ) in python *{

import numpy as np

X = np.load( data )
mu = np.load( state )

clusters  = {}
for x in X:
  bestmukey = min( [(i[ 0 ], np.linalg.norm( x-mu[ i[ 0 ] ] ) ) \
    for i in enumerate( mu )], key=lambda t:t[ 1 ])[ 0 ]
  try:
    clusters[ bestmukey ].append(x)
  except KeyError:
    clusters[ bestmukey ] = [ x ]

cls = "cls.npy"
np.save( cls, clusters )
}*

deftask evaluate( state1( File ) : cls( File ) ) in python *{

import numpy as np

clusters = np.load( cls ).item()
print( clusters )

newmu = []
keys = sorted( clusters.keys() )
for k in keys:
  newmu.append( np.mean( clusters[ k ], axis = 0 ) )

state1 = "state1.npy"
np.save( state1, newmu )
}*

deftask has_converged( <conv> : state0( File ) state( File ) ) in python *{

import numpy as np

oldmu = np.load( state0 )
mu    = np.load( state )

if set([tuple(a) for a in mu]) == set([tuple(a) for a in oldmu]):
  conv = ["true"]
else:
  conv = []
}*

k = 4;
N = 40;

X   = gen_data( N: N, k: k );
mu0 = init_state( data: X, k: k );

clusters = cluster( data: X, state: mu0 );
mu1      = evaluate( cls: clusters );
conv     = has_converged( state0: mu0, state: mu1 );

mu1 conv;