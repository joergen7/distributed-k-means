
%%==========================================================
%% Utility functions
%%==========================================================

def reverse-file-lst( lst : [File] ) -> [File] {
  fold acc : [File] = [: File], x : File <- lst do
    (x >> acc)
  end
}

def last-file( lst : [File], default : File ) -> File {
  fold acc : File = default, x : File <- lst do
    x
  end
}

def first-file( lst : [File], default : File ) -> File {
  last-file(
    lst     = reverse-file-lst( lst = lst ),
    default = default )
}



%%==========================================================
%% Foreign functions
%%==========================================================

def gen-random-sample( k : Str, n : Str ) -> <cluster-lst : [File]>
in Racket *{

  (require (only-in k-means/gen
                    gen-random-sample))

  (define cluster-lst
    (build-list (string->number k)
                (lambda (i) (number->string i))))

  (define c-lst
    (gen-random-sample (string->number k)
                       (string->number n)))

  (define (proc f c)
    (call-with-output-file f
      (lambda (out) (write c out))))

  (for-each proc cluster-lst c-lst)
}*

def shuffle-split( cluster-lst : [File], n : Str ) -> <split-lst : [File]>
in Racket *{

  (require (only-in racket/list
                    shuffle)

           (only-in k-means
                    split))

  (define (in-proc f)
    (call-with-input-file f
      (lambda (in) (read in))))

  (define (out-proc f s)
    (call-with-output-file f
      (lambda (out) (write s out))))

  (define s-lst
    (split
      (shuffle (apply append (map in-proc cluster-lst)))
      (string->number n)))

  (define split-lst
    (build-list (string->number n)
                (lambda (i) (number->string i))))

  (for-each out-proc split-lst s-lst)
}*

def init-cc-lst( k : Str ) -> <cc-lst : File>
in Racket *{

  (require (only-in k-means/gen
                    gen-init-cc-lst))

  (define l
    (gen-init-cc-lst (string->number k)))

  (define cc-lst
    "cc-lst")

  (call-with-output-file cc-lst
                         (lambda (out) (write l out)))
}*

def has-converged( a : File, b : File ) -> <p : Bool>
in Racket *{

  (define (proc in)
    (read in))

  (define cc-lst-a
    (call-with-input-file a proc))

  (define cc-lst-b
    (call-with-input-file b proc))

  (define p
    (equal? cc-lst-a cc-lst-b))
}*

def weighted-mean( pair-lst : [File] ) -> <mean-cc-lst : File>
in Racket *{

  (require (only-in k-means
                    weighted-mean))

  (define (in-proc f)
    (call-with-input-file f
      (lambda (in) (read in))))

  (define cluster-pair-lst
    (map in-proc pair-lst))

  (displayln cluster-pair-lst)

  (define m
    (weighted-mean cluster-pair-lst))

  (define mean-cc-lst
    "mean-cc-lst")

  (call-with-output-file mean-cc-lst
                         (lambda (out) (write m out)))
  
}*

def step-split( split : File, cc-lst : File ) -> <cluster-pair : File>
in Racket *{

  (require (only-in k-means
                    partition
                    cluster-center))

  (define s
    (call-with-input-file split (lambda (in) (read in))))

  (define c0
    (call-with-input-file cc-lst (lambda (in) (read in))))

  (define partition-lst
    (partition s c0))

  (define c1
    (for/list ([partition partition-lst])
          (cluster-center partition)))

  (define p
    (cons c1 (length s)))

  (define cluster-pair
    "cluster-pair")

  (call-with-output-file cluster-pair (lambda (out) (write p out)))

}*


%% k-means algorithm ---------------------------------------

def step( split-lst : [File], cc-lst : File ) -> File {

  let pair-lst : [File] =
    for split : File <- split-lst do

      let <cluster-pair = cluster-pair : File> =
        step-split( split  = split,
                    cc-lst = cc-lst );

      cluster-pair : File
    end;

  let <mean-cc-lst = new-cc-lst : File> =
    weighted-mean( pair-lst = pair-lst );

  new-cc-lst
}

def run-k-means( split-lst : [File], history : [File] ) -> File {

    let cc-lst : File =
      first-file( lst     = history,
                  default = error "history must not be empty" : File );

    let new-cc-lst : File =
      step( split-lst = split-lst,
            cc-lst    = cc-lst );

    let <p = converged : Bool> =
      has-converged( a = cc-lst,
                     b = new-cc-lst );

    if
      converged
    then
      cc-lst
    else
      run-k-means( split-lst = split-lst,
                   history   = ( new-cc-lst >> history ) )
    end
}

%% plotting ------------------------------------------------

def plot-random-sample( cluster-lst : [File] ) -> <png : File>
in Racket *{

  (require (only-in k-means/render
                    render-gen-sample)

           (only-in plot
                    plot))

  (define (proc f)
    (call-with-input-file f
      (lambda (in) (read in))))

  (define png "gen-sample.png")

  (plot (render-gen-sample (map proc cluster-lst))
        #:x-min      0
        #:x-max     10
        #:y-min      0
        #:y-max     10
        #:width    450
        #:height   450
        #:x-label  #f
        #:y-label  #f
        #:out-kind 'png
        #:out-file png)
}*

def plot-input-data( split-lst : [File] ) -> <png : File>
in Racket *{

  (require (only-in k-means/render
                    render-sample)

           (only-in plot
                    plot))

  (define (proc f)
    (call-with-input-file f
      (lambda (in) (read in))))

  (define png "input-data.png")

  (plot (render-sample (apply append (map proc split-lst)))
        #:x-min      0
        #:x-max     10
        #:y-min      0
        #:y-max     10
        #:width    450
        #:height   450
        #:x-label  #f
        #:y-label  #f
        #:out-kind 'png
        #:out-file png)
}*




%%==========================================================
%% Constants
%%==========================================================

let k-gen  : Str = 4;
let n-gen  : Str = 10000;
let k-est  : Str = 4;
let n-part : Str = 8;

%%==========================================================
%% Workflow
%%==========================================================

let <cluster-lst = cluster-lst : [File]> =
  gen-random-sample(
    k = k-gen,
    n = n-gen );

let <split-lst = split-lst : [File]> =
  shuffle-split(
    cluster-lst = cluster-lst,
    n           = n-part );

let <cc-lst = cc-lst0 : File> =
  init-cc-lst( k = k-est );

let cc-lst : File =
  run-k-means( split-lst = split-lst,
               history   = [cc-lst0 : File] );

let <png = random-sample-png : File> =
  plot-random-sample( cluster-lst = cluster-lst );

let <png = input-data-png : File> =
  plot-input-data( split-lst = split-lst );

%%==========================================================
%% Query
%%==========================================================

<random-sample-png = random-sample-png,
 input-data-png    = input-data-png,
 cc-lst            = cc-lst>;